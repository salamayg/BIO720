hmcol <- colorRampPalette(brewer.pal(9, "GnBu"))(100)  # picking our colours
library("RColorBrewer")
library("gplots")
hmcol <- colorRampPalette(brewer.pal(9, "GnBu"))(100)  # picking our colours
heatmap.2(mat, Rowv=as.dendrogram(hc),
symm=TRUE, trace="none",
col = rev(hmcol), margin=c(13, 13))
plotPCA(for_pca, intgroup=c("ecotype","treatment"))
plotPCA
head(all_counts)
test_batch_effects$treatment <- relevel(test_batch_effects$treatment, ref="1")
test_batch_effects$treatment <- relevel(test_batch_effects$treatment, ref=1)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
library(RColorBrewer)
display.brewer.all()
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer("Set3")
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer("Set2")
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer("Set1")
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer("Set3")
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads")
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer("Accent")
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Accent")
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set1")
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set2")
p <- ggplot(readCounts, aes(Sample, Reads, fill = name)) + geom_bar(width=0.8, position = "dodge",stat="identity", alpha=0.65)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set2")
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set1")
levels(readCounts$name)
readCounts$name <- factor(readCounts$name, levels = rev(levels(diamonds$cut)))
#Plot graph (and optionally create .tex file of graph for use with latex)
#tikz(file = "D:\\Dropbox\\School\\Graduate School\\Masters\\Grad_Courses\\BIO720\\final_project\\trim_stats.tex")
p <- ggplot(readCounts, aes(Sample, Reads, fill = name)) + geom_bar(width=0.8, position = "dodge",stat="identity", alpha=0.65)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set1")
readCounts$name <- factor(readCounts$name, levels = rev(levels(readCounts$name)))
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
readCounts$name <- factor(readCounts$name, levels = rev(levels(readCounts$name)))
p
p
p
p
p <- ggplot(readCounts, aes(Sample, Reads, fill = name)) + geom_bar(width=0.8, position = "dodge",stat="identity", alpha=0.65)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set1")
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
p <- ggplot(readCounts, order = -as.numeric(name), aes(Sample, Reads, fill = name)) + geom_bar(width=0.8, position = "dodge",stat="identity", alpha=0.65)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set1")
p <- ggplot(readCounts, order = as.numeric(name), aes(Sample, Reads, fill = name)) + geom_bar(width=0.8, position = "dodge",stat="identity", alpha=0.65)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set1")
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
levels(readCounts$name)
readCounts$name <- factor(readCounts$name, levels = rev(levels(readCounts$name)))
levels(readCounts$name)
p <- ggplot(readCounts, order=-as.numeric(name), aes(Sample, Reads, fill = name)) + geom_bar(width=0.8, position = "dodge",stat="identity", alpha=0.65)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set1")
readCounts$name <- ordered(readCounts$name)
p <- ggplot(readCounts, order=-as.numeric(name), aes(Sample, Reads, fill = name)) + geom_bar(width=0.8, position = "dodge",stat="identity", alpha=0.65)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_brewer(palette = "Set1")
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
effects <- DESeqDataSetFromMatrix(all_counts, experimental_design,
design = formula(~ ecotype + treatment + ecotype:treatment))
effects <- DESeq(effects)
plotDispEsts(effects)
?plostMA
?plotMA
?plotMA
plotMA(effects)
res1 <- results(effects, pAdjustMethod="BH")
head(res1)
summary(res1)
resultsNames(res1)
resultsNames(effects)
hist(res1$pvalue)
?collapseReplicates
plotPCA(for_pca, intgroup=c("batch","lane"))
plotPCA(for_pca, intgroup=c("batch"))
res_contrast_y_s <- results(DESeq_data,
contrast=list(c("ecotype_Y_vs_S")),
pAdjustMethod="BH")
DESeq_data <- DESeq(DESeq_data)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/idowrkin_rnaseq/beetle/data/rna_seq_analysis.r', echo=TRUE)
DESeq_data <- DESeqDataSetFromMatrix(tot_count_matrix, experimental_design,
design = formula(~ sex + size + sex:size))
DESeq_data <- DESeq(DESeq_data)
plotDispEsts(DESeq_data)
plotMA(DESeq_data, ylim=c(-2,2))
res_contrast_y_s <- results(DESeq_data,
contrast=list(c("ecotype_Y_vs_S")),
pAdjustMethod="BH")
resultsNames(DESeq_data)
res_contrast_y_s <- results(effects,
contrast=list(c("ecotype_Y_vs_S")),
pAdjustMethod="BH")
plotMA(res_contrast_y_s)
plotMA(res_contrast_y_s, main="DESeq2")
plotMA(res_contrast_y_s, main="DESeq2", MLE="TRUE")
plotMA(res_contrast_y_s, main="DESeq2", MLE=TRUE)
?"DESeq"
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1"))) +
stat_identity(geom = "text",
aes(label = paste(round((..count..)/sum(..count..)*100), "%")),
vjust = 5)
head(readChar())
head(readCounts)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1"))) +
stat_identity(geom = "text",
aes(label = paste(round((..Reads..)/sum(..Reads..)*100), "%")),
vjust = 5)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1")))  +
geom_text(aes(x=Sample, y=Reads, ymax=Reads, label=Reads,
hjust=ifelse(sign(Reads)>0, 1, 0)),
position = position_dodge(width=1))
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1")))  +
geom_text(aes(x=Sample, y=Reads, ymax=Reads, label=Reads/sum(Reads),
hjust=ifelse(sign(Reads)>0, 1, 0)),
position = position_dodge(width=1))
sum(readCounts$Reads)
View(readCounts)
sum(readCounts$Reads[,Sample==SD1])
sum(readCounts$Reads[,Sample==SD1])
sum(readCounts$Reads[,"Sample" == SD1])
sum(readCounts$Reads[,"Sample" == "SD1"])
sum(readCounts$Reads[,V1])
?stat_identitiy
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1"))) +
stat_identity(geom="text", position = dodgewidth, aes(x=Sample, y=Reads), vjust=-1)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1"))) +
stat_identity(geom="text", aes(x=Sample, y=Reads), vjust=-1)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1"))) +
stat_identity(geom="text", aes(x=Sample, label=Reads), vjust=-1)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1"))) +
stat_identity(geom="text", position = position_dodge(width=1), aes(x=Sample, label=Reads), vjust=-1)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1"))) +
stat_identity(geom="text", position = position_dodge(width=0.5), aes(x=Sample, label=Reads), vjust=-1)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1"))) +
stat_identity(geom="text", position = position_dodge(width=0.1), aes(x=Sample, y=Reads, ymax=Reads label=Reads/sum(Reads)), vjust=-1)
p + coord_flip() +
theme_bw() +
scale_y_continuous(labels = comma,expand=c(0,0)) +
theme(panel.border = element_blank(), axis.line = element_line(colour = "black")) +
labs(fill="", y="Paired Reads") +
scale_fill_manual(values = rev(brewer.pal(3,"Set1"))) +
stat_identity(geom="text", position = position_dodge(width=0.1), aes(x=Sample, y=Reads, ymax=Reads, label=Reads/sum(Reads)), vjust=-1)
View(readCounts)
readCounts$eco <- NULL
readCounts
readCounts$eco <- NA
readCounts
readCounts[,ec]
readCounts[,eco]
readCounts[,4]
readCounts[readCounts$Sample == grep(^S, readCounts$Sample)]
readCounts[readCounts$Sample == grep(\^S, readCounts$Sample)]
readCounts[readCounts$Sample == grep("^S", readCounts$Sample)]
readCounts[readCounts$Sample == grep("^S", readCounts$Sample),]
grep("^S",readCounts$Sample)
?grep
grep("^S",readCounts$Sample, value=TRUE)
readCounts[readCounts$Sample == grep("^S", readCounts$Sample, value=TRUE),]
readCounts[readCounts$Sample == grep("^S", readCounts$Sample, value=TRUE),]
readCounts[readCounts$Sample == grep("^S", readCounts$Sample, value=TRUE),][, "eco"] <- "shan"
readCounts
readCounts[readCounts$Sample == grep("^S", readCounts$Sample, value=TRUE),][, "eco"] <- "Shandong"
readCounts[readCounts$Sample == grep("^Y", readCounts$Sample, value=TRUE),][, "eco"] <- "Yukon"
readCounts
summary(readCounts)
?summary
library(doBy)
?summaryBy
summaryB(Mapped/Post-trimming, data=readCounts)
y
summaryBy(name, data=readCounts)
head(readCounts)
summaryBy(eco, data=readCounts)
summaryBy("eco", data=readCounts)
summaryBy(eco~name data=readCounts)
summaryBy(eco~name, data=readCounts)
?by
by(readCounts$Reads, readcounts$eco, mean)
by(readCounts$Reads, readCounts$eco, mean)
by(readCounts[readCounts$name == "Mapped",]readCounts$Reads, readCounts$eco, mean)
by(readCounts[readCounts$name == "Mapped",][readCounts$Reads], readCounts$eco, mean)
View(readCounts)
readCounts[readCounts$name == "Mapped",]
readCounts[readCounts$name == "Mapped",] / readCounts[readCounts$name == "Post-trimming"]
readCounts[readCounts$name == "Mapped",][,Reads] / readCounts[readCounts$name == "Post-trimming"][,Reads]
readCounts[readCounts$name == "Mapped",][,readCounts$Reads] / readCounts[readCounts$name == "Post-trimming"][,readCounts$Reads]
readCounts[readCounts$name == "Mapped",][,readCounts$Reads]
readCounts[readCounts$name == "Mapped",]
readCounts$Reads[readCounts$name == "Mapped",]
readCounts$Reads[readCounts$name == "Mapped",]
readCounts[readCounts$name == "Mapped",readCounts$Reads]
View(readCounts)
mapped
head(mappeD)
perce <- mapped$Reads / posttrim$Reads
head(perce)
?percent
perce <- percent(mapped$Reads / posttrim$Reads)
perce <- mapped$Reads / posttrim$Reads
mapped
posttrim
mapped
perce$Sample <- mapped$Sample
perce
percentages <- mapped$Reads / posttrim$Reads
percentages.df <- cbind(mapped$Sample,percentages)
percentages.df
mapped$Sample
mapped$Sample
as.character(mapped$Sample)
percentages.df <- cbind(as.character(mapped$Sample),percentages)
percentages.df
colnames(percentages.df) <- c("Sample", "Percentage")
percentages.df$eco <- NA
percentages.df <- as.data.frame(cbind(as.character(mapped$Sample),percentages))
colnames(percentages.df) <- c("Sample", "Percentage")
percentages.df$eco <- NA
percentages.df
percentages.df[percentages.df$Sample == grep("^S", percentages.df$Sample, value=TRUE),][, "eco"] <- "Shandong"
percentages.df[percentages.df$Sample == grep("^Y", percentages.df$Sample, value=TRUE),][, "eco"] <- "Yukon"
percentages.df
summary(percentages.df)
?summary
summary(percentages.df $ eco)
summaryBy(percentages.df)
?summaryBy
summaryBy(Percentage~eco, percentages.df)
mean(percentages.df$Percentage)
percentages <- as.numeric(mapped$Reads / posttrim$Reads)
percentages.df <- as.data.frame(cbind(as.character(mapped$Sample),percentages))
colnames(percentages.df) <- c("Sample", "Percentage")
percentages.df$eco <- NA
percentages.df[percentages.df$Sample == grep("^S", percentages.df$Sample, value=TRUE),][, "eco"] <- "Shandong"
percentages.df[percentages.df$Sample == grep("^Y", percentages.df$Sample, value=TRUE),][, "eco"] <- "Yukon"
summaryBy(Percentage~eco, percentages.df)
mean(percentages.df$Percentage)
str(percentages.df)
percentages <- as.numeric(mapped$Reads / posttrim$Reads)
percentages.df <- data.frame(as.character(mapped$Sample),percentages)
colnames(percentages.df) <- c("Sample", "Percentage")
percentages.df$eco <- NA
percentages.df[percentages.df$Sample == grep("^S", percentages.df$Sample, value=TRUE),][, "eco"] <- "Shandong"
percentages.df[percentages.df$Sample == grep("^Y", percentages.df$Sample, value=TRUE),][, "eco"] <- "Yukon"
str(percentages.df)
mean(percentages.df$Percentage)
summaryBy(Percentage~eco, percentages.df)
t.test()
?t.test
t.test(percentages.df$Percentage)
t.test(percentages.df$Percentage~percentages.df$eco)
summaryBy(Percentage~eco, percentages.df)
t.test(percentages.df$Percentage~percentages.df$eco)
t.test(percentages.df$Percentage~percentages.df$eco, paired=TRUE)
percentages.df$Eco <- NA
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
t.test(posttrim$Reads,mapped$Reads,paired=TRUE)
?prop.test
prop.test(percentages.df$Percentage~percentages.df$Eco)
t.test(percentages.df$Percentage~percentages.df$Eco)
t.test(posttrim$Reads~mapped$Reads,paired=TRUE)
t.test(posttrim$Reads,mapped$Reads,paired=TRUE)
summaryBy(Percentage~Eco, percentages.df)
percentages <- as.numeric(mapped$Reads / posttrim$Reads * 20000000)
percentages.df <- data.frame(as.character(mapped$Sample),percentages)
colnames(percentages.df) <- c("Sample", "Percentage")
#Add ecotype factor
percentages.df$Eco <- NA
percentages.df[percentages.df$Sample == grep("^S", percentages.df$Sample, value=TRUE),][, "Eco"] <- "Shandong"
percentages.df[percentages.df$Sample == grep("^Y", percentages.df$Sample, value=TRUE),][, "Eco"] <- "Yukon"
#Get mean percentage of reads mapped for each accession and do a simple t test to see if they are different
summaryBy(Percentage~Eco, percentages.df)
t.test(posttrim$Reads,mapped$Reads,paired=TRUE)
t.test(percentages.df$Percentage~percentages.df$Eco)
t.test(percentages.df$Percentage~percentages.df$Eco,paired=TRUE)
t.test(posttrim$Reads,mapped$Reads,paired=TRUE)
#Make data frame with percentages of post-trimmed reads which mapped
percentages <- as.numeric(mapped$Reads / posttrim$Reads)
percentages.df <- data.frame(as.character(mapped$Sample),percentages)
colnames(percentages.df) <- c("Sample", "Percentage")
#Add ecotype factor
percentages.df$Eco <- NA
percentages.df[percentages.df$Sample == grep("^S", percentages.df$Sample, value=TRUE),][, "Eco"] <- "Shandong"
percentages.df[percentages.df$Sample == grep("^Y", percentages.df$Sample, value=TRUE),][, "Eco"] <- "Yukon"
#Get mean percentage of reads mapped for each accession and do a simple t test to see if they are different
summaryBy(Percentage~Eco, percentages.df)
t.test(percentages.df$Percentage~percentages.df$Eco,paired=TRUE)
percentages.df$Percentage
percentages.df$Percentage ~ percentages.df$Eco
percentages.df
t.test(percentages.df$Percentage~percentages.df$Eco)
plotMA(effects)
summaryBy(Percentage~Eco, percentages.df)
parse_names
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/diff_gene_exp.R', echo=TRUE)
parse_names
ls
pretrim
posttrim
mean(pretrim$Reads - posttrim$Reads)
pretrim$Reads - posttrim$Reads
mean(pretrim$Reads - posttrim$Reads)
(pretrim$Reads - posttrim$Reads) / pretrim$Reads
mean(pretrim$Reads - posttrim$Reads) / pretrim$Reads
mean((pretrim$Reads - posttrim$Reads) / pretrim$Reads)
mean((mapped$Reads - posttrim$Reads) / posttrim$Reads)
mean((posttrim$Reads - mapped$Reads) / posttrim$Reads)
source('D:/Dropbox/School/Graduate School/Masters/Grad_Courses/BIO720/final_project/read_statistics.R', echo=TRUE)
all_counts[[1]]
list_cf[[1]]
tail(list_cf[[1]])
tail(all_counts)
setwd("D:\\Dropbox\\School\\Graduate School\\Masters\\Grad_Courses\\BIO720\\final_project\\htseq_counts_union_newnames")
count_files <- list.files(pattern="*.txt", full.names=FALSE)
list_cf <- lapply(count_files,function(i){read.csv(file=i,header=FALSE, sep="\t")})
tail(list_cf[[1]])
num_genes <- nrow(list_cf[[1]])
num_samples <- length(list_cf)
columns <- c("Gene","Count")
list_cf <- lapply(list_cf,function(i){
colnames(i) <- columns
return(i)
})
tail(list_cf[[1]])
all_counts <- matrix(unlist(lapply(list_cf, function(i){i$Count})),nrow = num_genes, ncol = num_samples)
rownames(all_counts) <- list_cf[[1]]$Gene
tail(all_counts)
dim(all_counts)
dim(all_counts)[1]
all_counts <- all_counts[1:((dim(all_counts)[1])-5),]
tail(all_counts)
parse_names <- strsplit(count_files, split="_")
parse_names <- matrix(unlist(parse_names), nrow=18, ncol=5, byrow=T)
parse_names <- cbind(parse_names,c("2","2","4","4","4","4","2","3","3","1","3","3","1","3","3","1","3","3"))
col_names_counts <- paste(parse_names[,1], "_", parse_names[,2], "_", parse_names[,3], "_", parse_names[,4], "_", parse_names[,5], "_", parse_names[,6], sep="")
colnames(all_counts) = col_names_counts
#remove all genes which had no expression in all of the samples
all_counts <- subset(all_counts,rowSums(all_counts) != 0)
all_counts$condition <- relevel(dds$condition, ref="untreated")
all_counts$condition <- relevel(all_counts$condition, ref="untreated")
all_counts <- matrix(unlist(lapply(list_cf, function(i){i$Count})),nrow = num_genes, ncol = num_samples)
tail(all_counts)
rownames(all_counts) <- list_cf[[1]]$Gene
tail(all_counts)
all_counts <- all_counts[1:((dim(all_counts)[1])-5),]
tail(all_counts)
parse_names <- strsplit(count_files, split="_")
parse_names <- matrix(unlist(parse_names), nrow=18, ncol=5, byrow=T)
parse_names <- cbind(parse_names,c("2","2","4","4","4","4","2","3","3","1","3","3","1","3","3","1","3","3"))
col_names_counts <- paste(parse_names[,1], "_", parse_names[,2], "_", parse_names[,3], "_", parse_names[,4], "_", parse_names[,5], "_", parse_names[,6], sep="")
colnames(all_counts) = col_names_counts
#remove all genes which had no expression in all of the samples
all_counts <- subset(all_counts,rowSums(all_counts) != 0)
experimental_design = data.frame(
sample_names = col_names_counts,  # sample name
ecotype = factor(parse_names[,1]), # each individual beetle
treatment = factor(parse_names[,2]),  # small or large beetle
replicate = factor(parse_names[,3]),   # male or females
lane = factor(parse_names[,4]),      # Whick lane on the Illumina flowcell.
batch = factor(parse_names[,6])
)
test_batch_effects <- DESeqDataSetFromMatrix(all_counts, experimental_design,
design = formula(~ batch))
test_batch_effects$treatment <- relevel(test_batch_effects$treatment, ref=1)
test_batch_effects2 <- DESeq(test_batch_effects)
test_batch_effects2_results <- results(test_batch_effects2)
summary(test_batch_effects2_results) # No evidence, but this is a bit incomplete
plotDispEsts(test_batch_effects2)
